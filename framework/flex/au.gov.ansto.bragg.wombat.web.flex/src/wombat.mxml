<?xml version="1.0" encoding="utf-8"?>
<mx:Application
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:gum="org.gumtree.flex.*"
	horizontalAlign="center" 
	backgroundColor="0x000000"
	creationComplete="init()">
	
	<!-- Scripts -->
	<mx:Script>
		<![CDATA[
			import com.adobe.serialization.json.JSON;
			import com.adobe.serialization.json.JSONDecoder;
			import flash.events.TimerEvent;
			import flash.utils.Timer;
            import mx.collections.ArrayCollection;
            import mx.containers.Grid;
            import mx.containers.GridRow;
            import mx.containers.GridItem;
            import mx.controls.TextArea;
            import mx.controls.Label;
            import mx.managers.BrowserManager;
			import mx.managers.IBrowserManager;
			import mx.messaging.channels.SecureAMFChannel;
			import mx.rpc.events.FaultEvent;
            import mx.rpc.events.ResultEvent;
            import flash.utils.Dictionary
            
            private static var serverURL:String = "";
            
            private var bm:IBrowserManager;
            
			private var timer:Timer;
			// hdb (devices) - widget maping
			private var hdbDeviceMap:Array;

			private var nsDeviceMap:Array;

			// hdb (components) - widget maping
			private var hdbComponentMap:Array;
			
			private var controlDict:Dictionary;
			
			private function init():void {
				
				// Set Title
				bm = BrowserManager.getInstance();
        	    bm.init("", "Wombat - High-Intensity Powder Diffractometer");
        	    
        	    controlDict = new Dictionary();
				// Set HDB HTTP
				hdbDeviceMap = [
				"datafilename", datafilename,
				"sx", sxValue,
				"sy", syValue,
				"som", somValue,
				"oct", octValue,
				"eom", eomValue,
				"echi", echiValue,
				"ephi", ephiValue,
				"currpoint", scan_point,
				"bm1_counts", bm1_counts,
				"bm2_counts", bm2_counts,
				"::histogram_memory::total_counts", detectorCounts,
				"::histogram_memory::time", timeCounting,
				"plc_tertiary", sampleShutter];
				
				var url:String = serverURL + "sics/rest/hdbs?devices=";
				var tempString:String = "";
				for (var i:int = 0; i < hdbDeviceMap.length; i += 2)
            	{
            		tempString += hdbDeviceMap[i];
            		if (i != hdbDeviceMap.length - 2) {
            			tempString += ",";	
            		}
            	}
            	tempString = encodeURIComponent(tempString);
            	url += tempString + "&format=json";
            	httpServiceForHdb.url = url;
            	
            	// Set Server HTTP
         		httpServiceForServer.url = serverURL + "sics/rest/status";
         		
         		
         		nsDeviceMap = [
					// Neutron Beam
					"reactorPower", reactorValue
				];
				
				url = "";
				for (i = 0; i < nsDeviceMap.length; i += 2)
            	{
            		url += nsDeviceMap[i];
            		if (i != nsDeviceMap.length - 2) {
            			url += ",";	
            		}
            	}
            	httpServiceForNS.url = serverURL + "ns/rest/hdbs?devices=" + url;

         		// Set HM URL
         		hmImage.url = serverURL + "dae/rest/image?screen_size_x=800&screen_size_y=600";
         		
         		httpServiceForEnv.url = serverURL + "sics/rest/group?path=" + encodeURIComponent("/control");
         		
         		httpServiceForBatch.url = serverURL + "sics/rest/batch";
         		// Update once
         		updateTimer(null);
         		
            	// Setup timer
				triggerTimer();
			}
            
            private function triggerTimer():void
            {
            	if (timerCheckBox.selected == true)
            	{
            		if (timer == null)
            		{
            			// Default timer with 1 sec interval
            			timer = new Timer(1000);
            			timer.addEventListener(TimerEvent.TIMER, updateTimer);
            			// Then adjust delay based on setting
            			changeTimerDelay();
            		}
            		timer.start();
            	}
            	else {
            		timer.stop();
            	}
            }
            
            private function updateTimer(evt:TimerEvent):void
            {
            	// Update HDB data
            	httpServiceForHdb.send();
            	httpServiceForNS.send();
            	// Update server data
            	httpServiceForServer.send();
            	httpServiceForEnv.send();
            	httpServiceForBatch.send();
            	// Update HM data
				hmImage.update();
            }
			
			private function changeTimerDelay():void
			{
				if (timer != null)
            	{
            		timer.delay = timerStepper.value * 1000;
            	}
			}
			
			private function handleHdbData(event:ResultEvent):void
			{
				//get the raw JSON data and cast to String
				var rawData:String = String(event.result);
				var result:Object = JSON.decode(rawData);
				var dataArray:Array = result.hdbs as Array;
				for (var i:int = 0; i < dataArray.length; i++) {
					var deviceName:String = dataArray[i].deviceId;
					// device
					if (deviceName != null)
					{
						var index:int = hdbDeviceMap.indexOf(deviceName);
						if (index >= 0)	{
							if (deviceName == "datafilename") {
								var fname:String = dataArray[i].value;
								var idx:int = fname.search("/");
								if (idx >= 0 && idx < fname.length - 1) {
									fname = fname.substring(fname.lastIndexOf("/") + 1, fname.length);
								}
								datafilename.text = fname;
							} else {
								var textArea:TextArea = hdbDeviceMap[index + 1] as TextArea; 
								textArea.text = dataArray[i].value;
							}
						}
						if (deviceName == "plc_tertiary") {
							handleSampleShutter(dataArray[i].value);
						}
						
					}
					// component
					else
					{
						var path:String = dataArray[i].path;
						var componentIndex:int = hdbComponentMap.indexOf(path);
						if (componentIndex >= 0)
						{
							var componentTextArea:TextArea = hdbComponentMap[componentIndex + 1] as TextArea; 
							componentTextArea.text = dataArray[i].value;
						}	
					}
				}
				
				// Update time
				lastUpdate.text = "Last update: " + dateFormatter.format(new Date());
				connectionStatus.text = "OK";
				connectionStatus.setStyle("backgroundColor", "#00c400");
			}
				

			private function handleNSData(event:ResultEvent):void
			{
				//get the raw JSON data and cast to String
				var rawData:String = String(event.result);
				var result:Object = JSON.decode(rawData);
				var dataArray:Array = result.hdbs as Array;
				for (var i:int = 0; i < dataArray.length; i++) {
					var deviceName:String = dataArray[i].id;
					// device
					if (deviceName != null)
					{
						var index:int = nsDeviceMap.indexOf(deviceName);
						if (index >= 0)
						{
							var textArea:TextArea = nsDeviceMap[index + 1] as TextArea; 
							textArea.text = dataArray[i].value;
						}
					}
				}
			}
			
			private function handleEnvData(event:ResultEvent):void
			{
				//get the raw JSON data and cast to String
				var rawData:String = String(event.result);
				var result:Object = JSON.decode(rawData);
				var dataArray:Array = result.hdbs as Array;
				for (var i:int = 0; i < dataArray.length; i++) {
					var deviceName:String = dataArray[i].id;
					if (controlDict[deviceName] != null) {
						controlDict[deviceName].text = dataArray[i].value;
					} else {
						var gridRow:GridRow = new GridRow();
						var gridItem:GridItem = new GridItem;
						gridItem.width = 93;
						var label:Label = new Label();
						label.width = 93;
						label.setStyle("textAlign", "right"); 
						label.text = deviceName
						gridItem.addChild(label);
						gridRow.addChild(gridItem);
						gridItem = new GridItem;
						var textArea:TextArea = new TextArea();
						textArea.text = dataArray[i].value;
						textArea.height=20
						textArea.setStyle("borderStyle", "solid");
						textArea.setStyle("backgroundColor", "#000000");
						textArea.setStyle("textAlign", "right");
						textArea.width = 70;
						controlDict[deviceName] = textArea;
						gridItem.addChild(textArea);
						gridRow.addChild(gridItem);
						controlGrid.addChild(gridRow);
					}
					// device
//					if (deviceName != null)
//					{
//						var index:int = nsDeviceMap.indexOf(deviceName);
//						if (index >= 0)
//						{
//							var textArea:TextArea = nsDeviceMap[index + 1] as TextArea; 
//							textArea.text = dataArray[i].value;
//						}
//					}
					
				}
			}
			
			private function handleBatchData(event:ResultEvent):void
			{
				var rawData:String = String(event.result);
				var result:Object = JSON.decode(rawData);
				runnerStatus.text = result.status
				if (result.status == "IDLE") {
					runnerStatus.setStyle("color", "#00c400");
					scriptName.text = "--";
					scriptContent.text = "--";
					scriptContent.setSelection(0, 0);
				} else if (result.status == "EXECUTING") {
					runnerStatus.setStyle("color", "#FFA500");
					scriptName.text = result.name;
					var content:String = result.content;
					var lineFeeding:RegExp = /\n\n/g
					content = content.replace(lineFeeding, "\n");
					scriptContent.text = content;
					scriptContent.setFocus();
					var range:String = result.range;
					var items:Array = range.split("=");
					scriptContent.setSelection(0, Number(items[2]));
					var scrollPosition:Number = Number(items[3]);
					if (scrollPosition > 8){
						scrollPosition = scrollPosition - 8;
					} else {
						scrollPosition = 0;
					}
//					scriptContent.setStyle("verticalScrollPosition", scrollPosition);
					scriptContent.verticalScrollPosition = scrollPosition;
				} else if (result.status == "PREPARING") {
					runnerStatus.setStyle("color", "#0000c4");
					scriptName.text = "--";
					scriptContent.text = "--";
					scriptContent.setSelection(0, 0);
				} else  {
					runnerStatus.setStyle("color", "#c40000");
					scriptName.text = "--";
					scriptContent.text = "--";
					scriptContent.setSelection(0, 0);
				}
			}
			
			private function handleServerData(event:ResultEvent):void
			{
				var rawData:String = String(event.result);
				var result:Object = JSON.decode(rawData);
//				if (result.status == "CONNECTED") {
//					serverStatus.text = "Online";
//					serverStatus.setStyle("backgroundColor", "#00c400");
//				} else  {
//					serverStatus.text = "Offline";
//					serverStatus.setStyle("backgroundColor", "#c40000");
//					initText();
//				}
				serverStatus.text = result.status
				if (result.status == "EAGER TO EXECUTE") {
					serverStatus.setStyle("backgroundColor", "#00c400");
				} else if (result.status == "COUNTING" || result.status == "WAIT" || result.status == "DRIVING") {
					serverStatus.setStyle("backgroundColor", "#FFA500");
				} else if (result.status == "PAUSED" || result.status == "PAUSE") {
					serverStatus.setStyle("backgroundColor", "#0000c4");
				} else  {
					serverStatus.text = "DISCONNECTED";
					serverStatus.setStyle("backgroundColor", "#c40000");
					initText();
				}
			}
						
			private function handleFault(event:FaultEvent):void
			{
				connectionStatus.text = "Fault";
				connectionStatus.setStyle("backgroundColor", "#c40000");				
				serverStatus.text = "--";
				serverStatus.setStyle("backgroundColor", "#000000");
				//to do. put -- in all text fields.
				initText();
			}
			
			private function handleSampleShutter(status:String):void
            {
            	if (status == "OPEN") {
               		sampleShutter.setStyle("backgroundColor", "#c40000");
            	}
            	else {
            		sampleShutter.setStyle("backgroundColor", "#00c400");
            	}
            } 
			
			private function initText():void {
            	var j:int = hdbDeviceMap.length;
				for (var i:int = 0; i < j; i+=2) {
					var textArea:TextArea = hdbDeviceMap[i+1] as TextArea; 
					textArea.text = "--";
					textArea.setStyle("backgroundColor", "#000000");
				}
            } 
		]]>
	</mx:Script>
	
	<!-- Services -->
	<mx:HTTPService id="httpServiceForHdb" resultFormat="text" result="handleHdbData(event)" fault="handleFault(event)" />
	<mx:HTTPService id="httpServiceForServer" resultFormat="text" result="handleServerData(event)" fault="handleFault(event)"/>
	<mx:HTTPService id="httpServiceForNS" resultFormat="text" result="handleNSData(event)" fault="handleFault(event)" />
	<mx:HTTPService id="httpServiceForEnv" resultFormat="text" result="handleEnvData(event)" fault="handleFault(event)" />
	<mx:HTTPService id="httpServiceForBatch" resultFormat="text" result="handleBatchData(event)" fault="handleFault(event)" />
	<mx:DateFormatter id="dateFormatter" formatString="YYYY-MM-DD HH:NN:SS A" />
	
	<!-- Effects -->
	<mx:WipeDown id="wipeIn" duration="1000"/>
	<mx:Dissolve id="dissolveIn" duration="1500" alphaFrom="0.0" alphaTo="1.0"/>
	
	<mx:Panel title="Wombat"
        width="910" height="715" horizontalAlign="center" verticalAlign="middle" fontSize="18" fontWeight="normal" backgroundColor="#000000" color="#FFFFFF" borderColor="#90CCFB" alpha="1.0" cornerRadius="3" layout="absolute">
 
 		<!-- Histogram image -->
 		<gum:ImageView id="hmImage" width="740" height="250" top="375" horizontalCenter="60" />
 		<mx:Text text="File ID" horizontalCenter="-350" bottom="259" fontSize="12" textAlign="center" width="60"/>
		<mx:TextArea horizontalCenter="-240" bottom="259" width="160" height="20" id="datafilename" backgroundColor="#000000" fontSize="12" textAlign="center" editable="false"/>
 		<mx:Text text="Scan Point" horizontalCenter="-110" bottom="259" fontSize="12" textAlign="center" width="80"/>
		<mx:TextArea horizontalCenter="-30" bottom="259" width="70" height="20" id="scan_point" backgroundColor="#000000" fontSize="12" textAlign="center" editable="false"/>
 		<mx:Text text="BM1 Counts" horizontalCenter="60" bottom="259" fontSize="12" textAlign="center" width="80"/>
		<mx:TextArea horizontalCenter="140" bottom="259" width="70" height="20" id="bm1_counts" backgroundColor="#000000" fontSize="12" textAlign="center" editable="false"/>
 		<mx:Text text="BM2 Counts" horizontalCenter="230" bottom="259" fontSize="12" textAlign="center" width="80"/>
		<mx:TextArea horizontalCenter="310" bottom="259" width="70" height="20" id="bm2_counts" backgroundColor="#000000" fontSize="12" textAlign="center" editable="false"/>

			<mx:Panel horizontalGap="0" width="270" height="158" top="10" left="10"
				title="Reactor Status" fontSize="12" borderColor="#FFFFFF" alpha="1.0"
				borderStyle="solid" backgroundColor="#000000" borderThickness="2"
				cornerRadius="4" creationCompleteEffect="{wipeIn}">
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="Reactor Power" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="reactorValue" text="--" editable="false" focusEnabled="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="MW" width="40"/>
						</mx:GridItem>
					</mx:GridRow>
					<mx:GridRow width="100%">
						<mx:GridItem width="100%">
							<mx:Label fontWeight="bold" text="Server Status" textAlign="left" width="100%"/>
						</mx:GridItem>
					</mx:GridRow>
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="Detector Counts" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="detectorCounts" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="cts" width="40"/>
						</mx:GridItem>
					</mx:GridRow>
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="Time of Counting" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="timeCounting" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="s" width="40"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:ControlBar  height="20"/>
			</mx:Panel>
				
			<mx:Panel width="270" height="326" top="10" horizontalCenter="0"
				title="Scan Status" fontSize="12" borderColor="#FFFFFF" alpha="1.0"
				borderStyle="solid" backgroundColor="#000000" borderThickness="2"
				cornerRadius="6" creationCompleteEffect="{wipeIn}">
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="--" id="runnerStatus" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem width="45%">
							<mx:TextArea id="scriptName" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" />
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="100%" height="254">
							<mx:TextArea id="scriptContent" text="--" backgroundColor="#EEEEEE" editable="false" selectable="true" horizontalScrollPolicy="auto" verticalScrollPolicy="auto" borderStyle="solid" color="#111111" textAlign="right" width="100%" height="254"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
			</mx:Panel>
			<mx:Panel width="270" height="326" top="10" right="10"
				title="Sample Environment" fontSize="12" borderColor="#FFFFFF" alpha="1.0"
				borderStyle="solid" backgroundColor="#000000" borderThickness="2"
				cornerRadius="6" creationCompleteEffect="{wipeIn}">
				<mx:Grid width="100%" id="controlGrid">
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="100%">
							<mx:Label fontWeight="bold" text="Sample Position" textAlign="left" width="100%"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="sx" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="sxValue" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="mm"  width="50"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="sy" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="syValue" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="mm"  width="50"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="som" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="somValue" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="deg"  width="50"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="100%">
							<mx:Label fontWeight="bold" text="COLLIMATOR" textAlign="left" width="100%"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="oct" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="octValue" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="deg"  width="50"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="100%">
							<mx:Label fontWeight="bold" text="EULER CRADLE" textAlign="left" width="100%"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="eom" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="eomValue" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="deg"  width="50"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="echi" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="echiValue" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="deg"  width="50"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="55%">
							<mx:Label text="ephi" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="ephiValue" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="70"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:Label text="deg"  width="50"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
			</mx:Panel>
			<mx:Panel width="270" height="158" top="178" left="10"
				title="Server Status" fontSize="12" borderColor="#FFFFFF" alpha="1.0"
				borderStyle="solid" backgroundColor="#000000" borderThickness="2"
				cornerRadius="6" creationCompleteEffect="{wipeIn}">
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="50%">
							<mx:Label text="Connection" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="connectionStatus" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="100"/>
						</mx:GridItem>
					</mx:GridRow>
					<mx:GridRow width="100%">
						<mx:GridItem width="50%">
							<mx:Label text="SICS Server" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="serverStatus" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="100"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:Grid width="100%">
					<mx:GridRow width="100%">
						<mx:GridItem width="50%">
							<mx:Label text="Sample Shutter" textAlign="right" width="100%"/>
						</mx:GridItem>
						<mx:GridItem>
							<mx:TextArea id="sampleShutter" text="--" focusEnabled="false" editable="false" height="20" borderStyle="solid" backgroundColor="#000000" textAlign="right" width="100"/>
						</mx:GridItem>
					</mx:GridRow>
				</mx:Grid>
				<mx:ControlBar height="20"/>
			</mx:Panel>
				
 		<!-- Instrument schematic -->
 		<!-- mx:Image source="assets/wombat_dash.jpg" scaleContent="true"
			creationCompleteEffect="{dissolveIn}" width="267" height="220" x="20" y="20"/ -->	

		<!-- Update control -->
		<mx:ControlBar>
            <mx:Label id="lastUpdate" fontSize="12" text="Last updated:"/>
            <mx:Spacer width="100%"/>
            <mx:CheckBox id="timerCheckBox" fontSize="12" selected="true" click="triggerTimer()"/>
            <mx:Label text="Auto refresh in every" fontSize="12"/>
            <mx:NumericStepper id="timerStepper" fontSize="12" color="#000000" value="10" change="changeTimerDelay()"/>
            <mx:Label text="sec" fontSize="12"/>
            <!-- Use Spacer to push Button control to the right. -->
        </mx:ControlBar>
        
    </mx:Panel>
    
	
	
</mx:Application>
