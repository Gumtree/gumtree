<!--
	This script requires the following parameters to be set in the ANT runtime
	Paramaters:
		buildDirectory - eg D:\Development\Workspace\Gumtree-1.8.x
		sourceDirectory - eg ${workspace_loc}/gumtree
		ideOS - win32-x86_64
-->
<project name="Packaging" default="usage" basedir=".">

	<!--
	############################################################################
	#
	# Configuration
	#
	############################################################################
	-->

	<property name="version" value="1.12.7" />
	<property name="exportDirectory" value="${buildDirectory}/export" />
	<property name="repositoryProject" value="org.gumtree.maven.repository" />
	<property name="repositoryPath" value="infrastructure/${repositoryProject}/target" />
	<property name="buildScriptPath" value="infrastructure/org.gumtree.sdk.scripts" />
	<property name="mavenBuildPath" value="infrastructure/org.gumtree.maven.all/target" />
	<property name="javadocBuildPath" value="infrastructure/org.gumtree.maven.javadoc/target" />
	<property name="referenceBuildPath" value="infrastructure/org.gumtree.sdk.doc.developer/asciidoc/output" />
	<property name="equinoxJarLocation" value="${buildDirectory}/tools/eclipse-SDK-4.2.2-${ideOS}/eclipse/plugins/org.eclipse.equinox.launcher_1.3.0.v20120522-1813.jar" />
	<property name="containerProduct" value="org.gumtree.app.osgi.product" />
	<property name="nsisDirectory" value="X:/apps/PortableApps/1.6/PortableApps/NSISPortable/App/NSIS" />
	<property name="cygwinDirectory" value="X:/apps/Cygwin/1.7.15-1/bin" />

	<!--
	############################################################################
	#
	# Deploy tasks
	#
	############################################################################
	-->

	<!--
		Copy P2 repository (used by build system)
		Paramaters:
			sourceDirectory			(predefined)
			exportDirectory			(predefined)
			repositoryProject		(predefined)
			repositoryPath			(predefined)
			version					(predefined)
	-->
	<target name="copyRepository">
		<echo message="Copying P2 repository..." />
		<delete dir="${exportDirectory}/repository" failonerror="false" />
		<!-- Copy directory structure -->
		<copy todir="${exportDirectory}/repository">
			<fileset dir="${sourceDirectory}/${repositoryPath}/repository" />
		</copy>
		<!-- Copy archived version -->
		<copy file="${sourceDirectory}/${repositoryPath}/${repositoryProject}.zip" tofile="${exportDirectory}/repository/GumtreeRepository_${version}.zip" overwrite="true" />
	</target>

	<!--
		Copy runtime applications (used by build system) 
		Paramaters:
			sourceDirectory			(predefined)
			exportDirectory			(predefined)
			repositoryPath			(predefined)
			containerProduct		(predefined)
	-->
	<target name="copyRuntime">
		<echo message="Copying runtime container..." />
		<delete dir="${exportDirectory}/container" failonerror="false" />
		<!-- win32 -->
		<copy todir="${exportDirectory}/container/win32">
			<fileset dir="${sourceDirectory}/${repositoryPath}/products/${containerProduct}/win32/win32/x86" excludes="eclipsec.exe" />
		</copy>
		<!-- win64 -->
		<copy todir="${exportDirectory}/container/win64">
			<fileset dir="${sourceDirectory}/${repositoryPath}/products/${containerProduct}/win32/win32/x86_64" excludes="eclipsec.exe" />
		</copy>
		<!-- gtk32 -->
		<copy todir="${exportDirectory}/container/gtk32">
			<fileset dir="${sourceDirectory}/${repositoryPath}/products/${containerProduct}/linux/gtk/x86" />
		</copy>
		<!-- gtk64 -->
		<copy todir="${exportDirectory}/container/gtk64">
			<fileset dir="${sourceDirectory}/${repositoryPath}/products/${containerProduct}/linux/gtk/x86_64" />
		</copy>
		<!-- cocoa64 -->
		<copy todir="${exportDirectory}/container/cocoa64">
			<fileset dir="${sourceDirectory}/${repositoryPath}/products/${containerProduct}/macosx/cocoa/x86_64" />
		</copy>
		<move file="${exportDirectory}/container/cocoa64/splash.bmp" todir="${exportDirectory}/container/cocoa64/gumtree.app/Contents/MacOS" />
		<exec executable="${cygwinDirectory}/mv">
			<arg value="${exportDirectory}/container/cocoa64/gumtree.app"/>
			<arg value="${exportDirectory}/container/cocoa64/Gumtree.app"/>
		</exec>
	</target>

	<!--
		Copy scripts for future packaging (used by build system)
		Paramaters:
			sourceDirectory			(predefined)
			exportDirectory			(predefined)
			buildScriptLocation		(predefined)
	-->
	<target name="copyScripts">
		<echo message="Copying build scripts..." />
		<delete dir="${exportDirectory}/scripts" failonerror="false" />
		<copy todir="${exportDirectory}/scripts/nbi/scripts">
			<fileset dir="${sourceDirectory}/${buildScriptPath}/nbi/scripts" />
		</copy>
		<copy todir="${exportDirectory}/scripts/nbi/nsis">
			<fileset dir="${sourceDirectory}/${buildScriptPath}/nbi/nsis" />
		</copy>
		<copy file="build.xml" todir="${exportDirectory}/scripts/nbi" />
		<copy file="PackagingServers.bat" todir="${exportDirectory}/scripts/nbi" />
		<copy file="PackagingWorkbeches.bat" todir="${exportDirectory}/scripts/nbi" />
		<copy file="PackagingDatabrowser.bat" todir="${exportDirectory}/scripts/nbi" />
	</target>

	<!--
		Copy aggregated Javadoc files (used by build system)
		Paramaters:
			sourceDirectory			(predefined)
			exportDirectory			(predefined)
			javadocBuildPath		(predefined)
	-->
	<target name="copyJavadoc">
		<echo message="Copying Javadoc..." />
		<delete dir="${exportDirectory}/docs/javadoc" failonerror="false" />
		<copy todir="${exportDirectory}/docs/javadoc">
			<fileset dir="${sourceDirectory}/${javadocBuildPath}/site/apidocs/" />
		</copy>
		<zip destfile="${exportDirectory}/docs/javadoc/javadoc.zip" basedir="${exportDirectory}/docs/javadoc" />
	</target>

	<!--
		Copy developer reference files (used by build system)
		Paramaters:
			sourceDirectory			(predefined)
			exportDirectory			(predefined)
			referenceBuildPath		(predefined)
	-->
	<target name="copyDeveloperReference">
		<echo message="Copying developer reference..." />
		<delete dir="${exportDirectory}/docs/reference" failonerror="false" />
		<copy todir="${exportDirectory}/docs/reference">
			<fileset dir="${sourceDirectory}/${referenceBuildPath}" />
		</copy>
	</target>

	<!--
	############################################################################
	#
	# Build application tasks
	#
	############################################################################
	-->

	<!--
		Copy container
		Paramaters:
			exportDirectory 		(predefined)
			applicationType 		(eg. workbench)
			applicationName 		(eg. gumtree)
			osType					(eg. win32)
	-->
	<macrodef name="copyContainer">
		<attribute name="applicationType" />
		<attribute name="applicationName" />
		<attribute name="osType" />
		<sequential>
			<copy todir="${exportDirectory}/products/@{applicationType}/@{applicationName}/@{osType}">
				<fileset dir="${exportDirectory}/container/@{osType}" />
			</copy>
		</sequential>
	</macrodef>

	<!--
		Install feature
		Paramaters:
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			applicationType 		(eg. workbench)
			applicationName 		(eg. gumtree)
			osType					(eg. win32)
			featureId				(eg. org.gumtree.app.workbench)
			os						(eg. win32)
			ws						(eg. win32)
			arch					(eg. x86)
	-->
	<macrodef name="installFeature">
		<attribute name="applicationType" />
		<attribute name="applicationName" />
		<attribute name="osType" />
		<attribute name="featureId" />
		<attribute name="os" />
		<attribute name="ws" />
		<attribute name="arch" />
		<sequential>
			<java fork="true" jar="${equinoxJarLocation}">
				<arg line="-application org.eclipse.equinox.p2.director" />
				<arg line="-metadataRepository &quot;file:/${exportDirectory}/repository&quot;" />
				<arg line="-artifactRepository &quot;file:/${exportDirectory}/repository&quot;" />
				<arg line="-installIU  &quot;@{featureId}.feature.group&quot;" />
				<arg line="-destination &quot;${exportDirectory}/products/@{applicationType}/@{applicationName}/@{osType}&quot;" />
				<arg line="-profile DefaultProfile" />
				<arg line="-bundlepool &quot;${exportDirectory}/products/@{applicationType}/@{applicationName}/common&quot;" />
				<arg line="-consoleLog" />
				<arg line="-roaming -p2.os @{os} -p2.ws @{ws} -p2.arch @{arch}" />
			</java>
		</sequential>
	</macrodef>


	<!--
		Build application
		Paramaters:
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			applicationType 		(eg. workbench)
			applicationName 		(eg. gumtree)
			osType					(eg. win32)
			os						(eg. win32)
			ws						(eg. win32)
			arch					(eg. x86)
		-->
	<macrodef name="buildApplication">
		<attribute name="applicationType" />
		<attribute name="applicationName" />
		<attribute name="osType" />
		<attribute name="os" />
		<attribute name="ws" />
		<attribute name="arch" />
		<sequential>
			<copyContainer applicationType="@{applicationType}" applicationName="@{applicationName}" osType="@{osType}" />
			<installFeature applicationType="@{applicationType}" applicationName="@{applicationName}" osType="@{osType}" featureId="org.gumtree.app.@{applicationType}.feature" os="@{os}" ws="@{ws}" arch="@{arch}" />
		</sequential>
	</macrodef>

	<!--
		Build application for multiple OS
		Paramaters:
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			applicationType 		(eg. workbench)
			applicationName 		(eg. gumtree)
			applicationLabel		(eg. GumtreeWorkbench)
	-->
	<macrodef name="buildApplicationMultiOS">
		<attribute name="applicationType" />
		<attribute name="applicationName" />
		<attribute name="applicationLabel" />
		<sequential>
			<delete includeEmptyDirs="true" failonerror="false">
				<fileset dir="${exportDirectory}/products/@{applicationType}/@{applicationName}" />
			</delete>
			<buildApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="win32" os="win32" ws="win32" arch="x86" />
			<buildApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="win64" os="win32" ws="win32" arch="x86_64" />
			<buildApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="gtk32" os="linux" ws="gtk" arch="x86" />
			<buildApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="gtk64" os="linux" ws="gtk" arch="x86_64" />
			<buildApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="cocoa64" os="macoxs" ws="cocoa" arch="x86_64" />
			<tar destfile="${exportDirectory}/products/@{applicationType}/@{applicationLabel}-${version}.tar.gz" compression="gzip">
				<tarfileset dir="${exportDirectory}/products/@{applicationType}" filemode="755">
					<include name="@{applicationName}/**" />
				</tarfileset>
			</tar>
			<delete includeEmptyDirs="true">
				<fileset dir="${exportDirectory}/products/@{applicationType}/@{applicationName}" defaultexcludes="false" />
			</delete>
		</sequential>
	</macrodef>

	<!--
		Build Bragg application
		Paramaters:
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			applicationType 		(eg. workbench)
			applicationName 		(eg. echidna)
			osType					(eg. win32)
			os						(eg. win32)
			ws						(eg. win32)
			arch					(eg. x86)
		-->
	<macrodef name="buildBraggApplication">
		<attribute name="applicationType" />
		<attribute name="applicationName" />
		<attribute name="osType" />
		<attribute name="os" />
		<attribute name="ws" />
		<attribute name="arch" />
		<sequential>
			<copyContainer applicationType="@{applicationType}" applicationName="@{applicationName}" osType="@{osType}" />
			<installFeature applicationType="@{applicationType}" applicationName="@{applicationName}" osType="@{osType}" featureId="org.gumtree.app.@{applicationType}.feature" os="@{os}" ws="@{ws}" arch="@{arch}" />
			<installFeature applicationType="@{applicationType}" applicationName="@{applicationName}" osType="@{osType}" featureId="au.gov.ansto.bragg.@{applicationName}.@{applicationType}.feature" os="@{os}" ws="@{ws}" arch="@{arch}" />
		</sequential>
	</macrodef>

	<!--
		Build Bragg application for multiple OS
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
			applicationType 		(eg. workbench)
			applicationName 		(eg. echidna)
			applicationLabel		(eg. EchidnaWorkbench)
	-->
	<macrodef name="buildBraggApplicationMultiOS">
		<attribute name="applicationType" />
		<attribute name="applicationName" />
		<attribute name="applicationLabel" />
		<sequential>
			<delete includeEmptyDirs="true" failonerror="false">
				<fileset dir="${exportDirectory}/products/@{applicationType}/@{applicationName}" />
			</delete>
			<buildBraggApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="win32" os="win32" ws="win32" arch="x86" />
			<buildBraggApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="win64" os="win32" ws="win32" arch="x86_64" />
			<buildBraggApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="gtk32" os="linux" ws="gtk" arch="x86" />
			<buildBraggApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="gtk64" os="linux" ws="gtk" arch="x86_64" />
			<buildBraggApplication applicationType="@{applicationType}" applicationName="@{applicationName}" osType="cocoa64" os="macoxs" ws="cocoa" arch="x86_64" />
			<tar destfile="${exportDirectory}/products/@{applicationType}/@{applicationLabel}-${version}.tar.gz" compression="gzip">
				<tarfileset dir="${exportDirectory}/products/@{applicationType}" filemode="755">
					<include name="@{applicationName}/**" />
				</tarfileset>
			</tar>
			<delete includeEmptyDirs="true">
				<fileset dir="${exportDirectory}/products/@{applicationType}/@{applicationName}" defaultexcludes="false" />
			</delete>
		</sequential>
	</macrodef>

	<!--
		Build webservers
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildWebserver">
		<delete dir="${exportDirectory}/products/webserver" failonerror="false" />
		<buildApplicationMultiOS applicationType="webserver" applicationName="gumtree" applicationLabel="GumtreeWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="echidna" applicationLabel="EchidnaWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="wombat" applicationLabel="WombatWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="kowari" applicationLabel="KowariWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="quokka" applicationLabel="QuokkaWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="platypus" applicationLabel="PlatypusWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="pelican" applicationLabel="PelicanWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="taipan" applicationLabel="TaipanWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="kookaburra" applicationLabel="KookaburraWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="bilby" applicationLabel="BilbyWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="dingo" applicationLabel="DingoWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="emu" applicationLabel="EmuWebserver" />
		<buildBraggApplicationMultiOS applicationType="webserver" applicationName="banksia" applicationLabel="BanksiaWebserver" />
	</target>

	<!--
		Build workbenches
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildWorkbench">
		<delete dir="${exportDirectory}/products/workbench" failonerror="false" />
		<buildApplicationMultiOS applicationType="workbench" applicationName="gumtree" applicationLabel="GumtreeWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="echidna" applicationLabel="EchidnaWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="wombat" applicationLabel="WombatWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="kowari" applicationLabel="KowariWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="quokka" applicationLabel="QuokkaWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="platypus" applicationLabel="PlatypusWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="pelican" applicationLabel="PelicanWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="taipan" applicationLabel="TaipanWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="kookaburra" applicationLabel="KookaburraWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="bilby" applicationLabel="BilbyWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="dingo" applicationLabel="DingoWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="emu" applicationLabel="EmuWorkbench" />
		<buildBraggApplicationMultiOS applicationType="workbench" applicationName="banksia" applicationLabel="BanksiaWorkbench" />
	</target>

	<!--
	############################################################################
	#
	# Build individual product tasks
	#
	############################################################################
	-->
	
	<!--
		Build Bragg application
		Paramaters:
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			applicationType 		(eg. workbench)
			applicationName 		(eg. echidna)
			osType					(eg. win32)
			os						(eg. win32)
			ws						(eg. win32)
			arch					(eg. x86)
		-->
	<macrodef name="quickBuildApplication">
		<attribute name="applicationType" />
		<attribute name="applicationName" />
		<attribute name="applicationLabel" />
		<sequential>
		    <delete failonerror="false">
		        <dirset dir="${exportDirectory}/products/@{applicationType}" includes="@{applicationName}" />
	    		<fileset dir="${exportDirectory}/products/@{applicationType}" includes="@{applicationLabel}*.tar.gz" />
			</delete>
			<buildBraggApplicationMultiOS applicationType="@{applicationType}" applicationName="@{applicationName}" applicationLabel="@{applicationLabel}" />
		</sequential>
	</macrodef>
	
	<!--
		Build Echidna Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildEchidnaWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="echidna" applicationLabel="EchidnaWebserver" />
	</target>

	<!--
		Build Wombat Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildWombatWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="wombat" applicationLabel="WombatWebserver" />
	</target>

	<!--
		Build Kowari Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildKowariWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="kowari" applicationLabel="KowariWebserver" />
	</target>
	
	<!--
		Build Quokka Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildQuokkaWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="quokka" applicationLabel="QuokkaWebserver" />
	</target>
	
	<!--
		Build Platypus Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildPlatypusWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="platypus" applicationLabel="PlatypusWebserver" />
	</target>
	
	<!--
		Build Pelican Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildPelicanWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="pelican" applicationLabel="PelicanWebserver" />
	</target>
	
	<!--
		Build Taipan Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildTaipanWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="taipan" applicationLabel="TaipanWebserver" />
	</target>
	
	<!--
		Build Kookaburra Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildKookaburraWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="kookaburra" applicationLabel="KookaburraWebserver" />
	</target>
	
	<!--
		Build Bilby Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildBilbyWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="bilby" applicationLabel="BilbyWebserver" />
	</target>
	
	<!--
		Build Dingo Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildDingoWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="dingo" applicationLabel="DingoWebserver" />
	</target>
	
	<!--
		Build Emu Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildEmuWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="emu" applicationLabel="EmuWebserver" />
	</target>
			
	<!--
		Build Banksia Webserver
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildBanksiaWebserver">
		<quickBuildApplication applicationType="webserver" applicationName="banksia" applicationLabel="BanksiaWebserver" />
	</target>
		
	<!--
	############################################################################
	#
	# Build individual product tasks
	#
	############################################################################
	-->
	<!--
		Build Echidna Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildEchidnaWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="echidna" applicationLabel="EchidnaWorkbench" />
	</target>

	<!--
		Build Wombat Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildWombatWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="wombat" applicationLabel="WombatWorkbench" />
	</target>

	<!--
		Build Kowari Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildKowariWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="kowari" applicationLabel="KowariWorkbench" />
	</target>
	
	<!--
		Build Quokka Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildQuokkaWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="quokka" applicationLabel="QuokkaWorkbench" />
	</target>
	
	<!--
		Build Platypus Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildPlatypusWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="platypus" applicationLabel="PlatypusWorkbench" />
	</target>
	
	<!--
		Build Pelican Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildPelicanWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="pelican" applicationLabel="PelicanWorkbench" />
	</target>
	
	<!--
		Build Taipan Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildTaipanWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="taipan" applicationLabel="TaipanWorkbench" />
	</target>
	
	<!--
		Build Kookaburra Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildKookaburraWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="kookaburra" applicationLabel="KookaburraWorkbench" />
	</target>
	
	<!--
		Build Bilby Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildBilbyWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="bilby" applicationLabel="BilbyWorkbench" />
	</target>
	
	<!--
		Build Dingo Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildDingoWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="dingo" applicationLabel="DingoWorkbench" />
	</target>
	
	<!--
		Build Emu Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildEmuWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="emu" applicationLabel="EmuWorkbench" />
	</target>

	<!--
		Build Banksia Workbench
		Paramaters:	
			exportDirectory 		(predefined)
			equinoxJarLocation		(predefined)
			version					(predefined)
	-->
	<target name="buildBanksiaWorkbench">
		<quickBuildApplication applicationType="workbench" applicationName="banksia" applicationLabel="BanksiaWorkbench" />
	</target>
	
	<!--
	############################################################################
	#
	# Build installer tasks
	#
	############################################################################
	-->

	<!--
		Build Win32 installer
		Paramaters:
			exportDirectory 		(predefined)
			equinoxJarLocation 		(predefined)
			version 				(predefined)
			nsisDirectory 			(predefined)
			applicationName			(eg. gumtree)
			applicationLabel		(eg. Gumtree)
			applicationShortcut		(eg. Gumtree Workbench)
	-->
	<macrodef name="buildWin32Installer">
		<attribute name="applicationName" />
		<attribute name="applicationLabel" />
		<attribute name="applicationShortcut" />
		<sequential>
			<delete includeEmptyDirs="true" failonerror="false">
				<fileset dir="${exportDirectory}/products/workbench/@{applicationName}" defaultexcludes="false" />
			</delete>
			<buildApplication applicationType="workbench" applicationName="@{applicationName}" osType="win32" os="win32" ws="win32" arch="x86" />
			<exec executable="${nsisDirectory}/makensis.exe">
				<arg value="/DINSTRUMENT=@{applicationName}" />
				<arg value="/DINSTRUMENT_LABEL=@{applicationLabel}" />
				<arg value="/DINSTRUMENT_SHORTCUT=@{applicationShortcut}" />
				<arg value="/DAPP_VERSION=${version}" />
				<arg value="/DSOURCE=${exportDirectory}/products/workbench/@{applicationName}" />
				<arg value="${exportDirectory}/scripts/nbi/nsis/gumtree_win32_bragg.nsi" />
			</exec>
			<delete includeEmptyDirs="true" failonerror="false">
				<fileset dir="${exportDirectory}/products/workbench/@{applicationName}" defaultexcludes="false" />
			</delete>
			<move file="${exportDirectory}/scripts/nbi/nsis/@{applicationLabel}WorkbenchSetup-${version}-win32.exe" todir="${exportDirectory}/products/installer/bragg32" />
		</sequential>
	</macrodef>

	<!--
		Build Win64 installer
		Paramaters:
			exportDirectory 		(predefined)
			equinoxJarLocation 		(predefined)
			version 				(predefined)
			nsisDirectory 			(predefined)
			applicationName			(eg. gumtree)
			applicationLabel		(eg. Gumtree)
			applicationShortcut		(eg. Gumtree Workbench)
	-->
	<macrodef name="buildWin64Installer">
		<attribute name="applicationName" />
		<attribute name="applicationLabel" />
		<attribute name="applicationShortcut" />
		<sequential>
			<delete includeEmptyDirs="true" failonerror="false">
				<fileset dir="${exportDirectory}/products/workbench/@{applicationName}" defaultexcludes="false" />
			</delete>
			<buildApplication applicationType="workbench" applicationName="@{applicationName}" osType="win64" os="win32" ws="win32" arch="x86_64" />
			<exec executable="${nsisDirectory}/makensis.exe">
				<arg value="/DINSTRUMENT=@{applicationName}" />
				<arg value="/DINSTRUMENT_LABEL=@{applicationLabel}" />
				<arg value="/DINSTRUMENT_SHORTCUT=@{applicationShortcut}" />
				<arg value="/DAPP_VERSION=${version}" />
				<arg value="/DSOURCE=${exportDirectory}/products/workbench/@{applicationName}" />
				<arg value="${exportDirectory}/scripts/nbi/nsis/gumtree_win64_bragg.nsi" />
			</exec>
			<delete includeEmptyDirs="true" failonerror="false">
				<fileset dir="${exportDirectory}/products/workbench/@{applicationName}" defaultexcludes="false" />
			</delete>
			<move file="${exportDirectory}/scripts/nbi/nsis/@{applicationLabel}WorkbenchSetup-${version}-win64.exe" todir="${exportDirectory}/products/installer/bragg64" />
		</sequential>
	</macrodef>
	
	<target name="buildBraggWin32Installers">
		<delete dir="${exportDirectory}/products/installer/bragg32" failonerror="false" />
		<buildWin32Installer applicationName="echidna" applicationLabel="Echidna" applicationShortcut="Echidna Workbench" />
		<buildWin32Installer applicationName="wombat" applicationLabel="Wombat" applicationShortcut="Wombat Workbench" />
		<buildWin32Installer applicationName="kowari" applicationLabel="Kowari" applicationShortcut="Kowari Workbench" />
		<buildWin32Installer applicationName="quokka" applicationLabel="Quokka" applicationShortcut="Quokka Workbench" />
		<buildWin32Installer applicationName="platypus" applicationLabel="Platypus" applicationShortcut="Platypus Workbench" />
		<buildWin32Installer applicationName="pelican" applicationLabel="Pelican" applicationShortcut="Pelican Workbench" />
		<buildWin32Installer applicationName="taipan" applicationLabel="Taipan" applicationShortcut="Taipan Workbench" />
		<buildWin32Installer applicationName="kookaburra" applicationLabel="Kookaburra" applicationShortcut="Kookaburra Workbench" />
		<buildWin32Installer applicationName="bilby" applicationLabel="Bilby" applicationShortcut="Bilby Workbench" />
		<buildWin32Installer applicationName="dingo" applicationLabel="Dingo" applicationShortcut="Dingo Workbench" />
		<buildWin32Installer applicationName="emu" applicationLabel="Emu" applicationShortcut="Emu Workbench" />
		<buildWin32Installer applicationName="banksia" applicationLabel="Banksia" applicationShortcut="Banksia Workbench" />
	</target>

	<target name="buildBraggWin64Installers">
		<delete dir="${exportDirectory}/products/installer/bragg64" failonerror="false" />
		<buildWin64Installer applicationName="echidna" applicationLabel="Echidna" applicationShortcut="Echidna Workbench" />
		<buildWin64Installer applicationName="wombat" applicationLabel="Wombat" applicationShortcut="Wombat Workbench" />
		<buildWin64Installer applicationName="kowari" applicationLabel="Kowari" applicationShortcut="Kowari Workbench" />
		<buildWin64Installer applicationName="quokka" applicationLabel="Quokka" applicationShortcut="Quokka Workbench" />
		<buildWin64Installer applicationName="platypus" applicationLabel="Platypus" applicationShortcut="Platypus Workbench" />
		<buildWin64Installer applicationName="pelican" applicationLabel="Pelican" applicationShortcut="Pelican Workbench" />
		<buildWin64Installer applicationName="taipan" applicationLabel="Taipan" applicationShortcut="Taipan Workbench" />
		<buildWin64Installer applicationName="kookaburra" applicationLabel="Kookaburra" applicationShortcut="Kookaburra Workbench" />
		<buildWin64Installer applicationName="bilby" applicationLabel="Bilby" applicationShortcut="Bilby Workbench" />
		<buildWin64Installer applicationName="dingo" applicationLabel="Dingo" applicationShortcut="Dingo Workbench" />
		<buildWin64Installer applicationName="emu" applicationLabel="Emu" applicationShortcut="Emu Workbench" />
		<buildWin64Installer applicationName="banksia" applicationLabel="Banksia" applicationShortcut="Banksia Workbench" />
	</target>

	<!-- Helper targets -->
	<target name="usage">
		<echo message="This is a packaging library." />
	</target>

</project>